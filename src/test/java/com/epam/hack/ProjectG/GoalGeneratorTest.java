package com.epam.hack.ProjectG;

import static com.epam.hack.model.enums.AgeGroup.EIGHTEEN_TO_TWENTY;
import static com.epam.hack.model.enums.AgeGroup.FIFTY_TO_SIXTY;
import static com.epam.hack.model.enums.AgeGroup.FORTY_TO_FIFTY;
import static com.epam.hack.model.enums.AgeGroup.SIXTY_AND_ABOVE;
import static com.epam.hack.model.enums.AgeGroup.THIRTY_TO_FORTY;
import static com.epam.hack.model.enums.AgeGroup.TWENTY_FIVE_TO_THIRTY;
import static com.epam.hack.model.enums.Gender.F;
import static com.epam.hack.model.enums.Gender.M;
import static com.epam.hack.model.enums.Level.HIGH;
import static com.epam.hack.model.enums.Level.LOW;
import static com.epam.hack.model.enums.Level.MID;
import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import org.junit.jupiter.api.Test;

import com.epam.hack.app.bo.GoalGenerator;
import com.epam.hack.model.Goal;
import com.epam.hack.model.UserProfile;
import com.epam.hack.model.enums.AgeGroup;

public class GoalGeneratorTest {

	UserProfile unmarriedGirl = new UserProfile(F, null, false);
	UserProfile marriedGirl = new UserProfile(F, null, true);
	UserProfile unmarriedBoy = new UserProfile(M, null, false);
	UserProfile marriedBoy = new UserProfile(M, null, true);
	
	private GoalGenerator goalGenerator = new GoalGenerator();
	
	@Test
	public void testGoalGeneratorForEarlyStage() {
		setAgeGroupToAll(EIGHTEEN_TO_TWENTY);
		earlyHumanGoals();
	}
	
	@Test
	public void testGoalGeneratorForYoungAdultStage() {
		setAgeGroupToAll(EIGHTEEN_TO_TWENTY);
		earlyHumanGoals();
	}
	
	@Test
	public void testGoalGeneratorForEarlyMidStage() {
		setAgeGroupToAll(TWENTY_FIVE_TO_THIRTY);
		
		List<Goal> goals = goalGenerator.getAutoGeneratedGoal(unmarriedGirl);
		assertThat(goals.size(), is(1));
		Goal goal = goals.get(0);
		assertThat(goal.getName(), containsString("Plan for Marriage Expenses"));
		assertThat(goal.getTargetMonth(), is(6));
		
		goals = goalGenerator.getAutoGeneratedGoal(marriedGirl);
		assertThat(goals.size(), is(1));
		goal = goals.get(0);
		assertThat(goal.getName(), containsString("Baby time... yay!"));
		assertThat(goal.getTargetMonth(), is(10));
		
		goals = goalGenerator.getAutoGeneratedGoal(marriedBoy);
		assertThat(goals.size(), is(1));
		goal = goals.get(0);
		assertThat(goal.getName(), containsString("Plan for baby expenses"));
		assertThat(goal.getTargetMonth(), is(6));
		
		goals = goalGenerator.getAutoGeneratedGoal(unmarriedBoy);
		assertThat(goals.size(), is(1));
		goal = goals.get(0);
		assertThat(goal.getName(), containsString("Plan for marriage"));
		assertThat(goal.getTargetMonth(), is(6));
	}
	
	@Test
	public void testGoalGeneratorForMidStage() {
		setAgeGroupToAll(THIRTY_TO_FORTY);
		
		List<Goal> goals = goalGenerator.getAutoGeneratedGoal(unmarriedGirl);
		assertThat(goals.size(), is(2));
		Collections.sort(goals, Comparator.comparing(g -> g.getPriority().getValue()));
		Goal goal = goals.get(0);
		assertThat(goal.getName(), containsString("Plan for Marriage Expenses"));
		assertThat(goal.getTargetMonth(), is(6));
		goal = goals.get(1);
		assertThat(goal.getName(), containsString("Plan to own a new apartment"));
		assertThat(goal.getTargetMonth(), is(24));
		
		goals = goalGenerator.getAutoGeneratedGoal(marriedGirl);
		assertThat(goals.size(), is(1));
		goal = goals.get(0);
		assertThat(goal.getName(), containsString("School time"));
		assertThat(goal.getTargetMonth(), is(6));
		assertThat(goal.getPriority(), is(HIGH));
		
		goals = goalGenerator.getAutoGeneratedGoal(marriedBoy);
		assertThat(goals.size(), is(1));
		goal = goals.get(0);
		assertThat(goal.getName(), containsString("School time"));
		assertThat(goal.getTargetMonth(), is(6));
		assertThat(goal.getPriority(), is(HIGH));
		
		goals = goalGenerator.getAutoGeneratedGoal(unmarriedBoy);
		assertThat(goals.size(), is(2));
		Collections.sort(goals, Comparator.comparing(g -> g.getPriority().getValue()));
		goal = goals.get(0);
		assertThat(goal.getName(), containsString("Plan for a master degree at university"));
		assertThat(goal.getTargetMonth(), is(6));
		goal = goals.get(1);
		assertThat(goal.getName(), containsString("Plan to own a new apartment"));
		assertThat(goal.getTargetMonth(), is(24));
	}
	
	@Test
	public void testGoalGeneratorForLateMiddleStage() {
		setAgeGroupToAll(FORTY_TO_FIFTY);
		
		List<Goal> goals = goalGenerator.getAutoGeneratedGoal(unmarriedGirl);
		assertThat(goals.size(), is(1));
		Goal goal = goals.get(0);
		assertThat(goal.getName(), containsString("Plan to buy a new house"));
		assertThat(goal.getTargetMonth(), is(24));
		assertThat(goal.getPriority(), is(HIGH));
		
		goals = goalGenerator.getAutoGeneratedGoal(marriedGirl);
		assertThat(goals.size(), is(1));
		goal = goals.get(0);
		assertThat(goal.getName(), containsString("Plan to buy a new house"));
		assertThat(goal.getTargetMonth(), is(24));
		assertThat(goal.getPriority(), is(HIGH));
		
		goals = goalGenerator.getAutoGeneratedGoal(marriedBoy);
		assertThat(goals.size(), is(1));
		goal = goals.get(0);
		assertThat(goal.getName(), containsString("Plan to buy a new house"));
		assertThat(goal.getTargetMonth(), is(24));
		assertThat(goal.getPriority(), is(HIGH));
		
		goals = goalGenerator.getAutoGeneratedGoal(unmarriedBoy);
		assertThat(goals.size(), is(1));
		goal = goals.get(0);
		assertThat(goal.getName(), containsString("Plan to buy a new house"));
		assertThat(goal.getTargetMonth(), is(24));
		assertThat(goal.getPriority(), is(HIGH));
	}
	
	@Test
	public void testGoalGeneratorForEarlyRetirement() {
		setAgeGroupToAll(FIFTY_TO_SIXTY);
		
		List<Goal> goals = goalGenerator.getAutoGeneratedGoal(unmarriedGirl);
		assertThat(goals.size(), is(2));
		Collections.sort(goals, Comparator.comparing(g -> g.getPriority().getValue()));
		Goal goal = goals.get(0);
		assertThat(goal.getName(), containsString("Plan for children's wedding gift"));
		assertThat(goal.getTargetMonth(), is(6));
		assertThat(goal.getPriority(), is(MID));
		goal = goals.get(1);
		assertThat(goal.getName(), containsString("Plan for a vacation"));
		assertThat(goal.getTargetMonth(), is(12));
		assertThat(goal.getPriority(), is(LOW));
		
		goals = goalGenerator.getAutoGeneratedGoal(marriedGirl);
		assertThat(goals.size(), is(2));
		Collections.sort(goals, Comparator.comparing(g -> g.getPriority().getValue()));
		goal = goals.get(0);
		assertThat(goal.getName(), containsString("Plan for children's wedding gift"));
		assertThat(goal.getTargetMonth(), is(6));
		assertThat(goal.getPriority(), is(MID));
		goal = goals.get(1);
		assertThat(goal.getName(), containsString("Plan for a vacation"));
		assertThat(goal.getTargetMonth(), is(12));
		assertThat(goal.getPriority(), is(LOW));
		
		goals = goalGenerator.getAutoGeneratedGoal(marriedBoy);
		assertThat(goals.size(), is(2));
		Collections.sort(goals, Comparator.comparing(g -> g.getPriority().getValue()));
		goal = goals.get(0);
		assertThat(goal.getName(), containsString("Plan for children's wedding gift"));
		assertThat(goal.getTargetMonth(), is(6));
		assertThat(goal.getPriority(), is(MID));
		goal = goals.get(1);
		assertThat(goal.getName(), containsString("Plan for a vacation"));
		assertThat(goal.getTargetMonth(), is(12));
		assertThat(goal.getPriority(), is(LOW));
		
		goals = goalGenerator.getAutoGeneratedGoal(unmarriedBoy);
		assertThat(goals.size(), is(2));
		Collections.sort(goals, Comparator.comparing(g -> g.getPriority().getValue()));
		goal = goals.get(0);
		assertThat(goal.getName(), containsString("Plan for children's wedding gift"));
		assertThat(goal.getTargetMonth(), is(6));
		assertThat(goal.getPriority(), is(MID));
		goal = goals.get(1);
		assertThat(goal.getName(), containsString("Plan for a vacation"));
		assertThat(goal.getTargetMonth(), is(12));
		assertThat(goal.getPriority(), is(LOW));
	}
	
	@Test
	public void testGoalGeneratorAfterRetirement() {
		setAgeGroupToAll(SIXTY_AND_ABOVE);
		
		List<Goal> goals = goalGenerator.getAutoGeneratedGoal(unmarriedGirl);
		assertThat(goals.size(), is(1));
		Goal goal = goals.get(0);
		assertThat(goal.getName(), containsString("Save for the next holiday of grand children"));
		assertThat(goal.getTargetMonth(), is(6));
		
		goals = goalGenerator.getAutoGeneratedGoal(marriedGirl);
		assertThat(goals.size(), is(1));
		goal = goals.get(0);
		assertThat(goal.getName(), containsString("Save for the next holiday of grand children"));
		assertThat(goal.getTargetMonth(), is(6));
		assertThat(goal.getPriority(), is(MID));
		
		goals = goalGenerator.getAutoGeneratedGoal(marriedBoy);
		assertThat(goals.size(), is(1));
		goal = goals.get(0);
		assertThat(goal.getName(), containsString("Save for the next holiday of grand children"));
		assertThat(goal.getTargetMonth(), is(6));
		
		goals = goalGenerator.getAutoGeneratedGoal(unmarriedBoy);
		assertThat(goals.size(), is(1));
		goal = goals.get(0);
		assertThat(goal.getName(), containsString("Save for the next holiday of grand children"));
		assertThat(goal.getTargetMonth(), is(6));
		assertThat(goal.getPriority(), is(MID));
	}
	
	private void earlyHumanGoals() {
		List<Goal> goals = goalGenerator.getAutoGeneratedGoal(unmarriedGirl);
		assertThat(goals.size(), is(1));
		Goal goal = goals.get(0);
		assertThat(goal.getName(), containsString("Plan for Marriage Expenses"));
		assertThat(goal.getTargetMonth(), is(6));
		
		goals = goalGenerator.getAutoGeneratedGoal(marriedGirl);
		assertThat(goals.size(), is(1));
		goal = goals.get(0);
		assertThat(goal.getName(), containsString("Save money for new home furnitures"));
		assertThat(goal.getTargetMonth(), is(3));
		
		goals = goalGenerator.getAutoGeneratedGoal(marriedBoy);
		assertThat(goals.size(), is(1));
		goal = goals.get(0);
		assertThat(goal.getName(), containsString("Save money for new home furnitures"));
		assertThat(goal.getTargetMonth(), is(3));
		
		goals = goalGenerator.getAutoGeneratedGoal(unmarriedBoy);
		assertThat(goals.size(), is(1));
		
		goal = goals.get(0);
		assertThat(goal.getName(), containsString("Plan for a master degree at university"));
		assertThat(goal.getTargetMonth(), is(6));
	}
	
	private void setAgeGroupToAll(AgeGroup ageGroup) {
		unmarriedGirl.setAgeGroup(ageGroup.getDescription());
		marriedGirl.setAgeGroup(ageGroup.getDescription());
		unmarriedBoy.setAgeGroup(ageGroup.getDescription());
		marriedBoy.setAgeGroup(ageGroup.getDescription());
	}
}
